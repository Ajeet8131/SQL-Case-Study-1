--Display the number of states present in the LocationTable.
SELECT COUNT(DISTINCT State) AS NumberOfStates FROM Location;

--How many products are of regular type?
SELECT COUNT(*) AS RegularProductCount FROM Product WHERE Type = 'Regular';

--How much spending has been done on marketing of product ID1?
SELECT SUM(Marketing) AS MarketingSpending FROM Fact WHERE ProductID = 1;

--What is the minimum sales of a product?
SELECT MIN(Sales) AS MinimumSales FROM Fact;

--Display the max Cost of Good Sold (COGS).
SELECT MAX(COGS) AS MaxCOGS FROM Fact;

--Display the details of the product where product type is coffee.
SELECT * FROM Product WHERE ProductType = 'Coffee';

--Display the details where total expenses are greater than 40.
SELECT * FROM Fact WHERE TotalExpenses > 40;

--What is the average sales in area code 719?
SELECT AVG(Sales) AS AverageSales FROM Fact WHERE AreaCode = 719;

--Find out the total profit generated by Colorado state.
SELECT SUM(Profit) AS TotalProfit FROM Fact
JOIN Location ON Fact.AreaCode = Location.AreaCode
WHERE State = 'Colorado';

--Display the average inventory for each product ID.
SELECT ProductID, AVG(Inventory) AS AverageInventory FROM Fact GROUP BY ProductID;

--Display state in a sequential order in a LocationTable.
SELECT State FROM Location ORDER BY State;

--Display the average budget of the Product where the average budget margin should be greater than 100.
SELECT ProductID, AVG(BudgetMargin) AS AverageBudgetMargin 
FROM Fact
GROUP BY ProductID 
HAVING AVG(BudgetMargin) > 100;

--What is the total sales done on date 2010-01-01?
SELECT SUM(Sales) AS TotalSales FROM Fact WHERE Date = '2010-01-01';

--Display the average total expense of each product ID on an individual date.
SELECT Date, ProductID, AVG(TotalExpenses) AS AverageTotalExpense 
FROM Fact 
GROUP BY Date, ProductID;

--Display the table with the following attributes such as date, product ID, product_type, product, sales, profit, state, area_code.
SELECT Fact.Date, Fact.ProductID, Product.ProductType, Product.Product, 
       Fact.Sales, Fact.Profit, Location.State, Fact.AreaCode
FROM Fact
JOIN Product ON Fact.ProductID = Product.ProductID
JOIN Location ON Fact.AreaCode = Location.AreaCode;

--Display the rank without any gap to show the sales-wise rank.
SELECT ProductID, Sales, RANK() OVER (ORDER BY Sales DESC) AS SalesRank FROM Fact;

--Find the state-wise profit and sales.
SELECT Location.State, SUM(Fact.Profit) AS TotalProfit, SUM(Fact.Sales) AS TotalSales
FROM Fact
JOIN Location ON Fact.AreaCode = Location.AreaCode
GROUP BY Location.State;

--Find the state-wise profit and sales along with the product name.
SELECT Location.State, Product.Product, SUM(Fact.Profit) AS TotalProfit, SUM(Fact.Sales) AS TotalSales
FROM Fact
JOIN Product ON Fact.ProductID = Product.ProductID
JOIN Location ON Fact.AreaCode = Location.AreaCode
GROUP BY Location.State, Product.Product;

--If there is an increase in sales of 5%, calculate the increased sales.
SELECT ProductID, Sales, Sales * 1.05 AS IncreasedSales FROM Fact;

--Find the maximum profit along with the product ID and product type.
SELECT fact.ProductId,ProductType, MAX(Profit) AS MaxProfit 
FROM Fact
JOIN Product ON Fact.ProductID = Product.ProductID
GROUP BY fact.ProductId,ProductType;

--Create a stored procedure to fetch the result according to the product type from the Product Table.
CREATE PROCEDURE GetProductsByType (IN productType VARCHAR(50))
BEGIN
   SELECT * FROM Product WHERE ProductType = productType;
END;

--Write a query by creating a condition in which if the total expenses are less than 60 then it is a profit, or else a loss.
SELECT ProductID, TotalExpenses, 
       CASE WHEN TotalExpenses < 60 THEN 'Profit' ELSE 'Loss' END AS ProfitOrLoss
FROM Fact;

--Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.
SELECT DATEPART(YEAR, Date) AS Year, DATEPART(WEEK, Date) AS Week, ProductID, SUM(Sales) AS WeeklySales
FROM Fact
GROUP BY DATEPART(YEAR, Date), DATEPART(WEEK, Date), ProductID WITH ROLLUP;

--Apply union and intersection operator on the tables which consist of the attribute area code.
-- Union
SELECT AreaCode FROM Fact
UNION
SELECT AreaCode FROM Location;

-- Intersection
SELECT AreaCode FROM Fact
INTERSECT
SELECT AreaCode FROM Location;

--Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.
CREATE FUNCTION GetProductByType(productType VARCHAR(50))
RETURNS TABLE
RETURN SELECT * FROM Product WHERE ProductType = productType;

--Change the product type from coffee to tea where product ID is 1 and undo it.
-- Update
UPDATE Product SET ProductType = 'Tea' WHERE ProductID = 1;

-- Undo (Revert)
UPDATE Product SET ProductType = 'Coffee' WHERE ProductID = 1;

--Display the date, product ID, and sales where total expenses are between 100 to 200.
SELECT Date, ProductID, Sales FROM Fact WHERE TotalExpenses BETWEEN 100 AND 200;

--Delete the records in the Product Table for regular type.
DELETE FROM Product WHERE Type = 'Regular';

--Display the ASCII value of the fifth character from the column Product.
SELECT ASCII(SUBSTRING(Product, 5, 1)) AS FifthCharacterASCII FROM Product;





